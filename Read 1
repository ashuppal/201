Nesting elements
Elements can be placed within other elements. This is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word very in a <strong> element, which means that the word is to have strong(er) text formatting:

<p>My cat is <strong>very</strong> grumpy.</p>
Copy to Clipboard
There is a right and wrong way to do nesting. In the example above, we opened the p element first, then opened the strong element. For proper nesting, we should close the strong element first, before closing the p.

The following is an example of the wrong way to do nesting:
Active learning: Adding attributes to an element
Another example of an element is <a>. This stands for anchor. An anchor can make the text it encloses into a hyperlink. Anchors can take a number of attributes, but several are as follows:

href
This attribute's value specifies the web address for the link. For example: href="https://www.mozilla.org/".

title
The title attribute specifies extra information about the link, such as a description of the page that is being linked to. For example, title="The Mozilla homepage". This appears as a tooltip when a cursor hovers over the element.

target
The target attribute specifies the browsing context used to display the link. For example, target="_blank" will display the link in a new tab. If you want to display the linked content in the current tab, just omit this attribute.

Edit the line below in the Input area to turn it into a link to your favorite website.

Add the <a> element.
Add the href attribute and the title attribute.
Specify the target attribute to open the link in the new tab.
You will be able to see your changes update live in the Output area. You should see a link—that when hovered over—displays the value of the title attribute and, when clicked, opens a new tab and navigates to the web address in the href attribute. Remember that you need to include a space between the element name, and between each attribute.
And finally, we can add some JavaScript to implement dynamic behavior:

const para = document.querySelector('p');

para.addEventListener('click', updateName);

function updateName() {
  const name = prompt('Enter a new name');
  para.textContent = `Player 1: ${name}`;
}
Copy to Clipboard
